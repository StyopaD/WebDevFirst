@import url("baseTokens.css");

/* The color pickers */

label[name="color"] {
    grid-row: 1;
    align-self: center;
    margin: 0.5em;
}

input[type="radio"] {
    grid-row: 2;
    align-self: center;
    margin: 0.5em;
    cursor: crosshair;
}

label:not(.hilt) {
    font-size: 1.8rem;
    color: white;
    font-weight: bold;
    align-self: start;
}

#on-off {

    position: absolute;
    width: 0;
    height: 0;
}

.lightsaber {
    position: relative;
    top: 30vh;
    left: 40vw;
    //transform: scale(1.8) translateY(6rem);
}

.hilt {
    cursor: pointer;
    display: block;
    width: .75rem;
    height: 7rem;
    background-color: red;
    border-radius: 0 0 4px 4px;
    /*The linear-gradient can directly encompass linear gradients with different colors.
    The cool hting is that whenever the starting point of a new color is smaller than the
    ending point of the previous color, the linear gradient just disappears and becomes
    a literal line, which is what we want, so we will just put 0!*/
    background-image: linear-gradient(silver 0 10px,
            silver 0 15px,
            rgb(255, 174, 0) 0 20px,
            silver 0 22px,
            black 0 25px,
            silver 0 27px,
            black 0 30px,
            silver 0 32px,
            black 0 35px,
            silver 0 37px,
            black 0 40px,
            silver 0 42px,
            black 0 45px,
            silver 0 47px,
            black 0 50px,
            silver 0 60px,
            rgb(255, 174, 0) 60px 80px,
            silver 0 100%);
}

.blade {
    position: absolute;
    background: white;
    height: 300%;
    width: 100%;
    bottom: 100%;
    border-radius: 100rem 100rem 0 0;

    box-shadow: inset 0 0 0.25rem hsla(var(--blade-hue), 100%, var(--blade-lightness), 1),
        0 0 1rem hsla(var(--blade-hue), 100%, var(--blade-lightness), 1),
        0 0 1.5rem hsla(var(--blade-hue), 100%, var(--blade-lightness), .75),
        0 0 2rem hsla(var(--blade-hue), 100%, var(--blade-lightness), .5),
        0 0 3rem hsla(var(--blade-hue), 100%, var(--blade-lightness), .5),
        0 0 5rem hsla(var(--blade-hue), 100%, var(--blade-lightness), 1);
    transform-origin: bottom;
    transition: transform 100ms ease-out;
}


.blade::before {
    content: '';
    position: absolute;
    top: -5%;
    height: 105%;
    left: 0;
    right: 0;
    bottom: 0;
    background: hsla(var(--blade-hue), 100%, var(--blade-lightness), 1);
    border-radius: inherit;
    filter: blur(1em);
    opacity: 1;
    animation: pulse linear 1.5s infinite;
}

.blade::after {
    content: '';
    position: absolute;
    top: -5%;
    height: 105%;
    left: 0;
    right: 0;
    bottom: 0;
    background: hsla(var(--blade-hue), 100%, var(--blade-lightness), 1);
    border-radius: inherit;
    filter: blur(1em);
    opacity: .6;
    animation: pulse linear .1s infinite;
}

@keyframes pulse {
    50% {
        opacity: .3;
    }
}

//passeig st gervasi n 51

#on-off:not(:checked)+.blade {
    transform: scale(0);
}

#on-off:checked+.blade {
    transform: scaleY(1);
}

input[id="yellow"]:checked~.lightsaber {
    --blade-hue: 60;
}

input[id="green"]:checked~.lightsaber {
    --blade-hue: 120;
}

input[id="blue"]:checked~.lightsaber {
    --blade-hue: 200;
}

input[id="purple"]:checked~.lightsaber {
    --blade-hue: 290;
}

input[id="red"]:checked~.lightsaber {
    --blade-hue: 360;
}

input[id="darksaber"]:checked~.lightsaber {
    --blade-hue: 120;
    --blade-lightness: 100%;
}

input[id="darksaber"]:checked~.lightsaber .blade {
    background: black;
    border-radius: 100% / 100px 100px 0 0;
}

input[id="darksaber"]:checked~.lightsaber .blade::after {
    background: black;
}

input[id="darksaber"]:checked~.lightsaber .blade {
    background: black;
}

/*

.lightsaber {
    transform: perspective(18rem) translateY(-20rem) translateZ(4rem) translateX(35rem) rotateX(20deg) rotateZ(-120deg) rotateY(-10deg) scale(3);
}


.lightsaber {
    transform: perspective(15rem) translateY(-20rem) translateZ(4rem) translateX(35rem) rotateX(20deg) rotateZ(-120deg) rotateY(-10deg) scale(3);
}


.lightsaber {
    transform: perspective(15rem) translateY(-13rem) translateZ(3rem) translateX(45rem) rotateX(30deg) rotateZ(-110deg) rotateY(-30deg) scale(3);
}

.lightsaber {
    transform: perspective(15rem) translateY(-13rem) translateZ(3rem) translateX(45rem) rotateX(30deg) rotateZ(-110deg) rotateY(-30deg) scale(3);
}

.lightsaber {
    transform: perspective(15rem) translateY(-13rem) translateZ(3rem) translateX(25rem) rotateX(30deg) rotateZ(-110deg) rotateY(-0deg) scale(3);
}De aqui pueden salir letras y mola un huevo
*/

.lightsaber {
    transform: perspective(15rem) translateY(-27rem) translateZ(4rem) translateX(35rem) rotateX(16deg) rotateZ(-125deg) rotateY(-5deg) scale(3);
}

/*
.letters {
    position: absolute;
    top: 20%;
    left: 40%;
    z-index: -5;
    font-size: 3rem;
    transform: perspective(15rem) translateY(25rem) rotateY(20deg) rotateZ(0deg) rotateX(0deg);
    animation: goUP linear 2s;
    animation-iteration-count: infinite;
}

@keyframes goUP {
    10% {
        z-index: 1;
    }

    50% {
        transform: perspective(15rem) translateY(0rem) rotateY(20deg) rotateZ(0deg) rotateX(0deg);
    }
}

*/



.touchMe {
    transform: perspective(15rem) translateX(40rem) translateY(-10rem) translateZ(4rem) rotateX(14deg) rotateZ(-22deg) rotateY(-5deg) scale(3);
}

.touchme::after {}